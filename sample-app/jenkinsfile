pipeline {
  agent any

  environment {
    REPO_SSH = 'git@github.com:vathsa-ponnappa/devops-basics.git'
    BRANCH = 'main'
  }

  stages {
    stage('Checkout') {
      steps {
        echo "-> Checking out ${env.REPO_SSH} (branch: ${env.BRANCH})"
        git url: "${env.REPO_SSH}", branch: "${env.BRANCH}"
        dir('sample-app') { echo "Inside sample-app directory" }
      }
    }

    stage('Build') {
      steps {
        dir('sample-app') {
          echo 'Building the Python sample app...'
          script {
            if (isUnix()) {
              sh '''
                if command -v python >/dev/null 2>&1; then
                  python --version
                elif command -v python3 >/dev/null 2>&1; then
                  python3 --version
                else
                  echo "Python not found on PATH. Skipping build and tests."
                  exit 0
                fi
              '''
            } else {
              bat '''
                where python >nul 2>&1 && (python --version) || (where py >nul 2>&1 && py -3 --version) || (echo Python not found on PATH. Skipping build and tests. & exit /b 0)
              '''
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir('sample-app') {
          echo 'Running tests (if pytest installed)...'
          script {
            if (isUnix()) {
              sh '''
                if command -v python >/dev/null 2>&1; then PY=python
                elif command -v python3 >/dev/null 2>&1; then PY=python3
                else echo "No python found, skipping tests"; exit 0; fi

                $PY --version
                $PY -m pip install --upgrade pip || true
                $PY -m pip install -r requirements.txt || echo "pip install returned non-zero"
                $PY -m pytest || rc=$?
                rc=${rc:-$?}
                if [ "$rc" -eq 5 ]; then
                  echo "No tests collected (pytest exit code 5). Treating as success."
                  exit 0
                elif [ "$rc" -ne 0 ]; then
                  echo "pytest failed with exit code $rc"
                  exit $rc
                fi
              '''
            } else {
              // Windows: write a PowerShell script and execute it to avoid cmd quoting issues
              bat '''
                REM create a one-off PowerShell script to run tests reliably
                type nul > run_tests.ps1
                echo Try { >> run_tests.ps1
                echo     $rc = 0 >> run_tests.ps1
                echo     if (Get-Command python -ErrorAction SilentlyContinue) { >> run_tests.ps1
                echo         Write-Output "Using python" >> run_tests.ps1
                echo         python -m pip install --upgrade pip | Out-Null >> run_tests.ps1
                echo         python -m pip install -r requirements.txt 2>&1 | Out-Null >> run_tests.ps1
                echo         python -m pytest >> run_tests.ps1
                echo         $rc = $LASTEXITCODE >> run_tests.ps1
                echo     } elseif (Get-Command py -ErrorAction SilentlyContinue) { >> run_tests.ps1
                echo         Write-Output "Using py -3" >> run_tests.ps1
                echo         py -3 -m pip install --upgrade pip | Out-Null >> run_tests.ps1
                echo         py -3 -m pip install -r requirements.txt 2>&1 | Out-Null >> run_tests.ps1
                echo         py -3 -m pytest >> run_tests.ps1
                echo         $rc = $LASTEXITCODE >> run_tests.ps1
                echo     } else { >> run_tests.ps1
                echo         Write-Output "No python launcher found, skipping tests" >> run_tests.ps1
                echo         exit 0 >> run_tests.ps1
                echo     } >> run_tests.ps1
                echo     if ($rc -eq 5) { >> run_tests.ps1
                echo         Write-Output "No tests collected (pytest exit code 5). Treating as success." >> run_tests.ps1
                echo         exit 0 >> run_tests.ps1
                echo     } elseif ($rc -ne 0) { >> run_tests.ps1
                echo         Write-Error "pytest failed with exit code $rc" >> run_tests.ps1
                echo         exit $rc >> run_tests.ps1
                echo     } else { >> run_tests.ps1
                echo         exit 0 >> run_tests.ps1
                echo     } >> run_tests.ps1
                echo } Catch { >> run_tests.ps1
                echo     Write-Error $_.Exception.Message >> run_tests.ps1
                echo     exit 1 >> run_tests.ps1
                echo } >> run_tests.ps1

                REM run the PowerShell script
                powershell -NoProfile -ExecutionPolicy Bypass -File run_tests.ps1
                set rc=%ERRORLEVEL%

                REM cleanup
                del /F /Q run_tests.ps1 >nul 2>&1

                REM propagate the result to Jenkins
                if %rc% NEQ 0 ( exit /b %rc% ) else ( exit /b 0 )
              '''
            }
          }
        }
      }
    }

    stage('Deploy') {
      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
      steps {
        dir('sample-app') {
          echo 'Simulating deployment...'
          script {
            if (isUnix()) {
              sh 'echo "Deployment simulated: success"'
            } else {
              bat 'echo Deployment simulated: success'
            }
          }
        }
      }
    }
  }

  post {
    success { echo '‚úÖ Pipeline finished successfully!' }
    unstable { echo '‚ö†Ô∏è Pipeline unstable (tests may have issues).' }
    failure { echo '‚ùå Pipeline failed! Check console logs.' }
    always {
      archiveArtifacts artifacts: 'sample-app/**', allowEmptyArchive: true
      echo 'üì¶ Post actions completed (artifacts archived if present).'
    }
  }
}
