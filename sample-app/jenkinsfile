pipeline {
  agent any

  environment {
    REPO_SSH = 'git@github.com:vathsa-ponnappa/devops-basics.git'
    BRANCH = 'main'
  }

  stages {
    stage('Checkout') {
      steps {
        echo "-> Checking out ${env.REPO_SSH} (branch: ${env.BRANCH})"
        git url: "${env.REPO_SSH}", branch: "${env.BRANCH}"
        dir('sample-app') { echo "Inside sample-app directory" }
      }
    }

    stage('Build') {
      steps {
        dir('sample-app') {
          echo 'Building the Python sample app...'
          script {
            if (isUnix()) {
              sh '''
                if command -v python >/dev/null 2>&1; then
                  python --version
                elif command -v python3 >/dev/null 2>&1; then
                  python3 --version
                else
                  echo "Python not found on PATH. Skipping build and tests."
                  exit 0
                fi
              '''
            } else {
              bat '''
                where python >nul 2>&1 && (python --version) || (where py >nul 2>&1 && py -3 --version) || (echo Python not found on PATH. Skipping build and tests. & exit /b 0)
              '''
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir('sample-app') {
          echo 'Running tests (if pytest installed)...'
          script {
            if (isUnix()) {
              sh '''
                if command -v python >/dev/null 2>&1; then PY=python
                elif command -v python3 >/dev/null 2>&1; then PY=python3
                else echo "No python found, skipping tests"; exit 0; fi

                $PY --version
                $PY -m pip install --upgrade pip || true
                $PY -m pip install -r requirements.txt || echo "pip install returned non-zero"
                $PY -m pytest || rc=$?
                rc=${rc:-$?}
                if [ "$rc" -eq 5 ]; then
                  echo "No tests collected (pytest exit code 5). Treating as success."
                  exit 0
                elif [ "$rc" -ne 0 ]; then
                  echo "pytest failed with exit code $rc"
                  exit $rc
                fi
              '''
            } else {
              // Use PowerShell inside a single bat invocation to avoid cmd parsing issues
              bat '''
              powershell -NoProfile -ExecutionPolicy Bypass -Command "& {
                try {
                  if (Get-Command python -ErrorAction SilentlyContinue) {
                    Write-Output 'Using python'
                    python -m pip install --upgrade pip | Out-Null
                    python -m pip install -r requirements.txt 2>&1 | Out-Null
                    python -m pytest
                    $rc = $LASTEXITCODE
                  } elseif (Get-Command py -ErrorAction SilentlyContinue) {
                    Write-Output 'Using py -3'
                    py -3 -m pip install --upgrade pip | Out-Null
                    py -3 -m pip install -r requirements.txt 2>&1 | Out-Null
                    py -3 -m pytest
                    $rc = $LASTEXITCODE
                  } else {
                    Write-Output 'No python launcher found, skipping tests'
                    exit 0
                  }

                  if ($rc -eq 5) {
                    Write-Output 'No tests collected (pytest exit code 5). Treating as success.'
                    exit 0
                  } elseif ($rc -ne 0) {
                    Write-Error \"pytest failed with exit code $rc\"
                    exit $rc
                  } else {
                    exit 0
                  }
                } catch {
                  Write-Error $_.Exception.Message
                  exit 1
                }
              }"
              '''
            }
          }
        }
      }
    }

    stage('Deploy') {
      when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
      steps {
        dir('sample-app') {
          echo 'Simulating deployment...'
          script {
            if (isUnix()) {
              sh 'echo "Deployment simulated: success"'
            } else {
              bat 'echo Deployment simulated: success'
            }
          }
        }
      }
    }
  }

  post {
    success { echo '‚úÖ Pipeline finished successfully!' }
    unstable { echo '‚ö†Ô∏è Pipeline unstable (tests may have issues).' }
    failure { echo '‚ùå Pipeline failed! Check console logs.' }
    always {
      archiveArtifacts artifacts: 'sample-app/**', allowEmptyArchive: true
      echo 'üì¶ Post actions completed (artifacts archived if present).'
    }
  }
}
